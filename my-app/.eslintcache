[{"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\quickSort.js":"1","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\sortingvisualizer.jsx":"2","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\heapSort.js":"3","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\insertionSort.js":"4","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\selectionSort.js":"5","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\bubbleSort.js":"6","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\App.js":"7","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\mergeSort.js":"8","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\index.js":"9","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\components\\backdrop\\Backdrop.js":"10","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\components\\Navbar\\SidebarData.js":"11","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\components\\Navbar\\Navbar.js":"12","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutBubble.js":"13","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutMerge.js":"14","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutHeap.js":"15","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutInsertion.js":"16","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutMe.js":"17","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutQuick.js":"18","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutSelection.js":"19"},{"size":2158,"mtime":1606796312849,"results":"20","hashOfConfig":"21"},{"size":11743,"mtime":1607483048662,"results":"22","hashOfConfig":"21"},{"size":1668,"mtime":1607376663891,"results":"23","hashOfConfig":"21"},{"size":628,"mtime":1606796242878,"results":"24","hashOfConfig":"21"},{"size":712,"mtime":1606796213657,"results":"25","hashOfConfig":"21"},{"size":1167,"mtime":1607376660191,"results":"26","hashOfConfig":"21"},{"size":288,"mtime":1607046105090,"results":"27","hashOfConfig":"21"},{"size":2897,"mtime":1606601001814,"results":"28","hashOfConfig":"21"},{"size":500,"mtime":1606883318522,"results":"29","hashOfConfig":"21"},{"size":148,"mtime":1607108123622,"results":"30","hashOfConfig":"21"},{"size":966,"mtime":1607320232070,"results":"31","hashOfConfig":"21"},{"size":1857,"mtime":1607483045674,"results":"32","hashOfConfig":"21"},{"size":5050,"mtime":1607998818965,"results":"33","hashOfConfig":"21"},{"size":4932,"mtime":1608002047574,"results":"34","hashOfConfig":"21"},{"size":8290,"mtime":1607998825405,"results":"35","hashOfConfig":"21"},{"size":3777,"mtime":1607998835413,"results":"36","hashOfConfig":"21"},{"size":3026,"mtime":1608002107339,"results":"37","hashOfConfig":"21"},{"size":6019,"mtime":1607999329822,"results":"38","hashOfConfig":"21"},{"size":3861,"mtime":1607998864788,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"tabtv2",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\quickSort.js",[],["85","86"],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\sortingvisualizer.jsx",["87","88"],"import React from 'react';\r\nimport './sortingvisualizer.css';\r\nimport Navbar from '../components/Navbar/Navbar';\r\nimport { BrowserRouter as Router} from 'react-router-dom';\r\nimport {getMergeSortAnimations} from  './SortingAlgorithms/mergeSort.js';\r\nimport {getBubbleSortAnimations} from  './SortingAlgorithms/bubbleSort.js';\r\nimport {getHeapSortAnimations} from  './SortingAlgorithms/heapSort.js';\r\nimport {getQuickSortAnimations} from  './SortingAlgorithms/quickSort.js';\r\nimport {getInsertionSortAnimations} from './SortingAlgorithms/insertionSort.js';\r\nimport {getSelectionSortAnimations} from './SortingAlgorithms/selectionSort';\r\nimport {AiFillGithub} from 'react-icons/ai';\r\nimport {FaStopCircle} from 'react-icons/fa';\r\n\r\n \r\n// Change this value for the number of bars (value) in the array.\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#DAD2BC';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = '#2EBFA5';\r\n\r\nconst SECONDARY_COLOR_TWO = '#C5D86D';\r\n\r\n\r\nexport default class sortingvisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            arrayBars: 50,\r\n            speed: 30,\r\n        };\r\n    }\r\n    handleChangeSpeed = (e) => {\r\n        this.setState({speed: e.target.value})\r\n    }\r\n    handleChangeBars = (e) => {\r\n        this.setState( {arrayBars: e.target.value} );\r\n        this.resetArray();\r\n    }\r\n\r\n    componentDidMount() \r\n    {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() \r\n    {\r\n        const array = [];\r\n        for (let i = 0; i < this.state.arrayBars; i++) {\r\n            array.push(randomIntBetween(7,550));\r\n        }\r\n        this.setState({array});\r\n\r\n        let numOfDisabled = document.getElementsByClassName(\"btn disabled\").length;\r\n        console.log(numOfDisabled);\r\n        let resetButtons;\r\n        if (numOfDisabled > 0) resetButtons = true; \r\n        this.toggleButtons(resetButtons,\"all\");\r\n    }\r\n\r\n    toggleButtons(onOrOff, allOrGen, animationsLength) {\r\n        const buttons = document.getElementsByClassName('btn disabled');\r\n        const settingSliders = document.getElementsByClassName(\"slider\");\r\n        if (onOrOff === false) {\r\n            const sortButtons = document.getElementsByClassName(\"btn sort\");\r\n            while (sortButtons.length > 0) {\r\n                sortButtons[0].className = \"btn disabled\";\r\n            }\r\n            for (let i = 0; i < settingSliders.length; i++)\r\n            {\r\n                settingSliders[i].disabled = true;\r\n            }\r\n            const genArrayButton = document.getElementsByClassName('btn');\r\n            genArrayButton[0].className = \"btn disabled\";\r\n        }\r\n        else if (onOrOff === true && allOrGen === 'gen') {\r\n            setTimeout( () => {\r\n                buttons[0].className = \"btn\";\r\n                for (let i = 0; i < settingSliders.length; i++)\r\n                {\r\n                    settingSliders[i].disabled = false;\r\n                }\r\n            }, animationsLength * this.state.speed)\r\n        }\r\n        else if (onOrOff === true && allOrGen === \"all\") {\r\n            while (buttons.length > 0) {\r\n                buttons[0].className = \"btn sort\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // sorts\r\n    // The array animation arrays are ordered like this: [index1, heightofindex2, index2, heightofindex1].\r\n    mergeSort() \r\n    {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n\r\n        this.toggleButtons(false);\r\n        this.toggleButtons(true,\"gen\", animations.length);\r\n\r\n        for (let i = 0; i < animations.length; i++) \r\n        {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = (i % 3 === 0 || i % 3 === 2);\r\n          if (isColorChange) \r\n          {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            if ( i%3 === 0)\r\n            {\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                barTwoStyle.backgroundColor = SECONDARY_COLOR_TWO;\r\n                }, i * this.state.speed);\r\n            }\r\n            if (i%3 === 2)\r\n            {\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                    }, i * this.state.speed);\r\n            }\r\n          }\r\n          else \r\n          {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * this.state.speed);\r\n          }\r\n        }\r\n    }\r\n\r\n    quickSort() \r\n    {\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        this.toggleButtons(false);\r\n        this.toggleButtons(true,\"gen\", animations.length);\r\n        this.showSwap(animations);\r\n    }\r\n\r\n    bubbleSort() \r\n    {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        this.toggleButtons(false);\r\n        this.toggleButtons(true,\"gen\", animations.length);\r\n\r\n        for (let i = 0; i < animations.length; i++) \r\n        {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = (i % 4 === 0) || (i % 4 === 3); // if first or second value of animations, proceed\r\n\r\n          if (isColorChange) \r\n          {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n           \r\n            if (i%4 === 0)\r\n            {\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                    barTwoStyle.backgroundColor = SECONDARY_COLOR_TWO;\r\n                }, i * this.state.speed);\r\n            }\r\n\r\n            if (i%4 === 3)\r\n            {\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, i * this.state.speed);\r\n            }\r\n          }\r\n\r\n          else if ( (i % 4 === 1 ||  i % 4 === 2) && animations[i] !== 'no swap')  // if third or fourth value AND swapping occured, change the bars\r\n          {              \r\n            const [barOneIdx, newHeight] = animations[i];\r\n\r\n            setTimeout(() => {\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * this.state.speed);\r\n          }\r\n        }\r\n        \r\n    }\r\n\r\n    heapSort() {\r\n        const animations = getHeapSortAnimations(this.state.array);\r\n        this.toggleButtons(false);\r\n        this.toggleButtons(true,\"gen\", animations.length);\r\n        this.showSwap(animations);\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        this.toggleButtons(false);\r\n        this.toggleButtons(true,\"gen\", animations.length);\r\n        this.showSwap(animations);\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n        this.toggleButtons(false);\r\n        this.toggleButtons(true,\"gen\", animations.length);\r\n        this.showSwap(animations);\r\n    }\r\n\r\n    showSwap(animations) {\r\n        for ( let i = 0; i < animations.length; i++)\r\n        {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            let order = i%4;\r\n            if (order === 0)\r\n            {\r\n                let indexOne = animations[i][0];\r\n                let indexTwo = animations[i][1];\r\n                \r\n                setTimeout( () => {\r\n                    arrayBars[indexOne].style.backgroundColor = SECONDARY_COLOR;\r\n                    arrayBars[indexTwo].style.backgroundColor = SECONDARY_COLOR_TWO;\r\n                }, i * this.state.speed);\r\n            }\r\n            else if (order === 3)\r\n            {\r\n                let indexOne = animations[i][0];\r\n                let indexTwo = animations[i][1];\r\n\r\n                setTimeout( () => {\r\n                    arrayBars[indexOne].style.backgroundColor = PRIMARY_COLOR;\r\n                    arrayBars[indexTwo].style.backgroundColor = PRIMARY_COLOR;\r\n                }, i * this.state.speed);\r\n            }\r\n            else if ( order === 1|| order === 2 )\r\n            {\r\n                let indexToChange = animations[i][0];\r\n                let newHeight = animations[i][1];\r\n\r\n                setTimeout( () => {\r\n                    arrayBars[indexToChange].style.height = `${newHeight}px`;\r\n                }, i * this.state.speed);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            [\r\n            <header className=\"top\">\r\n                <button title=\"Stop animation and reset array\" className=\"stop-button\"><a id=\"stop-link\" href=\"/\"><FaStopCircle id=\"stop-icon\"/></a></button>\r\n                <div className =\"speedSlider\">\r\n                    <div className=\"name-slider\">Speed</div>\r\n                        <input title=\"Drag left to make animation faster\" className=\"slider\" type=\"range\" min={1} max ={100}value={this.state.speed} onChange={this.handleChangeSpeed}/>\r\n                </div>\r\n                <div className=\"barSlider\">\r\n                    <div className=\"name-slider\">Bars</div>\r\n                        <input title=\"Drag right to increase the number of bars\" className=\"slider\" type=\"range\" min={10} max ={70}value={this.state.arrayBars} onChange={this.handleChangeBars}/>\r\n                </div>\r\n                <Router>\r\n                    <Navbar/>\r\n                </Router>\r\n                <a id=\"github-link\" target =\"_blank\" rel = \"nonreferrer\" href= \"https://github.com/longtongj28/sorting-visualizer\"><AiFillGithub title=\"Github Repository for the site\"id=\"github-icon\"/></a>\r\n                <a className=\"homelink\" href='/'></a>\r\n                <h1 id = \"title\">Sorting Algorithms</h1>\r\n                <div className = \"button-bar\">\r\n                    <button className=\"btn\" onClick = {() => this.resetArray()}> Generate New Array</button>\r\n                    <button className=\"btn sort\" onClick = {() => this.quickSort()}>Quick Sort</button>\r\n                    <button className=\"btn sort\" onClick = {() => this.bubbleSort()}>Bubble Sort</button>\r\n                    <button className=\"btn sort\" onClick = {() => this.mergeSort()}>Merge Sort</button>\r\n                    <button className=\"btn sort\" onClick = {() => this.heapSort()}>Heap Sort</button>\r\n                    <button className=\"btn sort\" onClick = {() => this.insertionSort()}>Insertion Sort</button>\r\n                    <button className=\"btn sort\" onClick = {() => this.selectionSort()}>Selection Sort</button>\r\n                </div>\r\n            </header>,\r\n\r\n            <div className=\"array-container\">\r\n            {array.map( (value, idx) => (\r\n                <div\r\n                    className=\"array-bar\"\r\n                    key={idx}\r\n                    style={{\r\n                        height: `${value}px`,\r\n                        backgroundColor: PRIMARY_COLOR,\r\n                    }}\r\n                ></div>\r\n            ))}\r\n            </div>\r\n                ]\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntBetween( min, max ) {\r\n    return Math.floor(Math.random() * (max - min + 1 ) + min);\r\n}","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\heapSort.js",["89"],"import {swap} from './quickSort';\r\n\r\nexport function getHeapSortAnimations(array) {\r\n    const animations = [];\r\n\r\n    let n = array.length;\r\n   \r\n    heapSort(array, n, animations);\r\n    return animations;\r\n}\r\n//using max heap concept to sort\r\nfunction heapSort(array, n, animations)\r\n{\r\n  \r\n  //first we have to build the max heap based tree\r\n  //start at the first node that isn't a leaf node.\r\n  for (let i = Math.floor(n/2-1); i >= 0; i--)\r\n  {\r\n    heapify(array, n, i, animations);\r\n  }\r\n  //Next, we have to \"delete\" all of the nodes on the tree, starting from the root.\r\n  //To do so, we swap the \"last\" node with the root.\r\n  //While doing so, we want to make sure the remaining nodes are in max heap conditions.\r\n  for ( let i = n-1; i > 0; i--)\r\n  {\r\n    animations.push( [ 0, i ] );\r\n    animations.push( [ 0, array[i] ] );\r\n    animations.push( [ i, array[0] ] );\r\n    animations.push( [ 0, i ] );\r\n\r\n    swap(array, 0, i);\r\n    heapify(array, i, 0, animations);\r\n  }\r\n}\r\n\r\n// moves the largest element in a tree to the root\r\nfunction heapify(array, n, i, animations)\r\n{\r\n  let largest = i;\r\n  let left = 2*i + 1;\r\n  let right = 2*i + 2;\r\n\r\n\r\n  while ( left < n && array[left] > array[largest] )\r\n  {\r\n    largest = left;\r\n  }\r\n\r\n  while ( right < n && array[right] > array[largest] )\r\n  {\r\n    largest = right;\r\n  }\r\n  let heapSwaps = [];\r\n  if (largest !==  i)\r\n  {\r\n    animations.push( [ largest, i ] ); // on\r\n    animations.push( [ largest, array[i] ] ); // swap\r\n    animations.push( [ i, array[largest] ] );\r\n    animations.push( [ largest, i ] ); // off\r\n    swap( array, largest , i);\r\n\r\n    heapify( array, n, largest, animations);\r\n  }\r\n}\r\n\r\n",["90","91"],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\insertionSort.js",[],["92","93"],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\selectionSort.js",[],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\bubbleSort.js",[],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\App.js",[],["94","95"],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\SortingVisualizer\\SortingAlgorithms\\mergeSort.js",[],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\index.js",[],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\components\\backdrop\\Backdrop.js",[],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\components\\Navbar\\SidebarData.js",[],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutBubble.js",[],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutMerge.js",["96"],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutHeap.js",["97","98","99","100","101"],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutInsertion.js",["102"],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutMe.js",["103"],"C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutQuick.js",["104"],"import './about.css';\r\nimport {useState} from 'react';\r\nimport Modal from 'react-modal';\r\nimport {AiOutlineClose, AiFillQuestionCircle} from 'react-icons/ai';\r\n\r\n// 1. keep backdrop 2. show aboutSort and x button to close.\r\n\r\nfunction AboutQuick() {\r\n\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <button className='sortInfoButton' onClick={ () => setModalIsOpen(true) }><AiFillQuestionCircle className=\"side-icon\"/> About Quick Sort</button>\r\n            <div className=\"infoBox\">\r\n                <Modal\r\n                    closeTimeoutMS={150}\r\n                    style = {\r\n                        {\r\n                            overlay: {\r\n                                backgroundColor: 'rgba(0,0,0,0.4)'\r\n                            },\r\n                            content: {\r\n                                background: '#4A6C6F',\r\n                                top: '60px',\r\n                                bottom: '60px',\r\n                                left: '60px',\r\n                                border:'none',\r\n                                right: '60px',\r\n                            }\r\n                        }\r\n                    }\r\n                    isOpen={modalIsOpen} \r\n                    onRequestClose={ () => setModalIsOpen(false)}>\r\n                    <div id=\"top\" className=\"aboutSortInfo\">\r\n                        <h2  className = \"titles\">Basic Concept of Quick Sort<hr/><br/></h2>\r\n                        \r\n                        <p className = \"paragraphs\">\r\n                           First, a pivot element must be chosen. In my implementation, I chose the first element as the pivot element. <br/><br/>\r\n                           Second, the array is partitioned until the left side of the pivot contains all elements less than the pivot element, and where the right side of the pivot has all the elements greater than it. Eventually, the pivot becomes the middle of the array.<br/><br/>\r\n                           Third, the left side and the right side of the partitioned original array are also individually partitioned and sorted so that the first element of those subarrays becomes the middle pivot element.<br/><br/>\r\n                           Recursively perform these operations until the array is sorted. Remember that the pivot element is already in its sorted position, so it doesn't need to move.\r\n                           \r\n\r\n                        </p>\r\n                        <h2 className=\"titles\">Pseudocode of Quick Sort<hr/><br/></h2>\r\n                        \r\n                        <p className=\"paragraphs\">\r\n                           function quickSort( array, lower_bound, upper_bound )<br/>\r\n                            &emsp;&emsp; if (lower_bound &gt;= upper_bound) return; <br/><br/>\r\n                            &emsp;&emsp; let loc_of_pivot = partition( array, lower_bound, upper_bound )<br/>\r\n                            &emsp;&emsp; quickSort( array, lower_bound, loc_of_pivot - 1) ~~~partition from the beginning to the pivot spot<br/>\r\n                            &emsp;&emsp; quickSort( array, loc_of_pivot + 1, upper_bound ) ~~~ and partition from the pivot spot to the end<br/><br/>\r\n                            function partition(array, lower_bound, upper_bound)<br/>\r\n                            &emsp;&emsp; let pivot = auxArray[lower_bound] ~~~In my implentation I used the first element of an array be the pivot<br/>\r\n                            &emsp;&emsp; let start = lower_bound<br/>\r\n                            &emsp;&emsp; let end = upper_bound<br/><br/>\r\n                            &emsp;&emsp; while ( start &lt; end ) <br/>\r\n                            &emsp;&emsp;&emsp;&emsp; while ( array[start] &lt;= pivot ) ~~~ Starting form the left, find the first element that is greater than the pivot <br/>\r\n                            &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; start++<br/>\r\n                            &emsp;&emsp;&emsp;&emsp; while ( array[end] &gt; pivot ) ~~~ Staring from the right side of the array, find the first element that is less than the pivot  <br/>\r\n                            &emsp;&emsp; &emsp;&emsp; &emsp;&emsp; end--<br/>\r\n                            &emsp;&emsp;&emsp;&emsp; if (start &lt; end)<br/>\r\n                            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp; swap(array[start], array[end]) ~~~ start must be found before end to be swapped, so it can't be past the pivot element<br/>\r\n                            &emsp;&emsp; swap( array[lower_bound], array[end] ) ~~~~ swap the pivot element with 'end' index<br/>\r\n                            &emsp;&emsp; return end\r\n                        </p>\r\n                        <h2 className=\"titles\">Big O Time Complexity<hr/><br/></h2>\r\n                        \r\n                        <p className=\"paragraphs\">\r\n                           The worst case scenario for this is O(n^2, where the \"lower_bound\" above is always the greatest or smallest element. <br/>\r\n                           The partitioning is O(logn) since we split the array into two subarrays continuously and employ a divide and conquer approach.<br/>\r\n                           Thus, the average and best case is O(nlogn) time complexity, since the partitioning is O(logn) and we need to partition every element eventually.<br/><br/>\r\n                            Check out this <a className=\"link\" target=\"_blank\" href=\"https://www.youtube.com/watch?v=QN9hnmAgmOc\">lecture/video</a> for a much more detailed explanation on everything about this sorting algorithm.<br/><br/>\r\n                            <a className=\"link backTop\" rel=\"noreferrer\"href=\"#top\">Back to top</a>\r\n                        </p>\r\n                    </div>\r\n                    <button className=\"close-button\" onClick={ () => setModalIsOpen(false) }><AiOutlineClose color=\"#EEEEEE\" className=\"close-icon\"/></button>\r\n                </Modal>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default AboutQuick;","C:\\Users\\Johnson\\Desktop\\Sorting Visualizer\\my-app\\src\\aboutSorts\\AboutSelection.js",["105"],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":270,"column":37,"nodeType":"112","endLine":270,"endColumn":53},{"ruleId":"113","severity":1,"message":"114","line":271,"column":17,"nodeType":"115","endLine":271,"endColumn":50},{"ruleId":"116","severity":1,"message":"117","line":53,"column":7,"nodeType":"118","messageId":"119","endLine":53,"endColumn":16},{"ruleId":"106","replacedBy":"120"},{"ruleId":"108","replacedBy":"121"},{"ruleId":"106","replacedBy":"122"},{"ruleId":"108","replacedBy":"123"},{"ruleId":"106","replacedBy":"124"},{"ruleId":"108","replacedBy":"125"},{"ruleId":"110","severity":1,"message":"111","line":68,"column":64,"nodeType":"112","endLine":68,"endColumn":79},{"ruleId":"126","severity":1,"message":"127","line":62,"column":51,"nodeType":"128","endLine":63,"endColumn":74},{"ruleId":"126","severity":1,"message":"127","line":63,"column":79,"nodeType":"128","endLine":64,"endColumn":110},{"ruleId":"126","severity":1,"message":"127","line":69,"column":114,"nodeType":"128","endLine":70,"endColumn":48},{"ruleId":"126","severity":1,"message":"127","line":70,"column":53,"nodeType":"128","endLine":71,"endColumn":94},{"ruleId":"126","severity":1,"message":"127","line":71,"column":99,"nodeType":"128","endLine":72,"endColumn":176},{"ruleId":"110","severity":1,"message":"111","line":58,"column":64,"nodeType":"112","endLine":58,"endColumn":79},{"ruleId":"110","severity":1,"message":"111","line":49,"column":248,"nodeType":"112","endLine":49,"endColumn":263},{"ruleId":"110","severity":1,"message":"111","line":74,"column":64,"nodeType":"112","endLine":74,"endColumn":79},{"ruleId":"110","severity":1,"message":"111","line":59,"column":64,"nodeType":"112","endLine":59,"endColumn":79},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-unused-vars","'heapSwaps' is assigned a value but never used.","Identifier","unusedVar",["129"],["130"],["129"],["130"],["129"],["130"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-global-assign","no-unsafe-negation"]